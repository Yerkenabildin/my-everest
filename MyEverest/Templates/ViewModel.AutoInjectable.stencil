// sourcery:inline:ViewModel.AutoInject
{% for type in types.implementing.ViewModelType|annotated:"autoinject" %}
    {% for method in type.initializers %}
    {% if forloop.first %}
    container.register({{ type.name }}Type.self) { (r) in
      let vm = {{ type.name }}({% for param in method.parameters %}{{ param.name }}: r.resolve({{ param.typeName }}.self){% if not param.isOptional %}!{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %})
      return vm
    {% endif %}
    {% empty %}
    container.register({{ type.name }}Type.self) { _ in
      let vm = {{ type.name }}()
      return vm
    {% endfor %}
    }
{% endfor %}
// sourcery:end

