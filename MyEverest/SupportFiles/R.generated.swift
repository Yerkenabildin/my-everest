//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 9 images.
  struct image {
    /// Image `calendar_icon`.
    static let calendar_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar_icon")
    /// Image `checkbox on`.
    static let checkboxOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox on")
    /// Image `checkbox`.
    static let checkbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox")
    /// Image `coins_icon`.
    static let coins_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "coins_icon")
    /// Image `color_icon`.
    static let color_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "color_icon")
    /// Image `deadline`.
    static let deadline = Rswift.ImageResource(bundle: R.hostingBundle, name: "deadline")
    /// Image `done_date`.
    static let done_date = Rswift.ImageResource(bundle: R.hostingBundle, name: "done_date")
    /// Image `pen_icon`.
    static let pen_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "pen_icon")
    /// Image `type_Icon`.
    static let type_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "type_Icon")
    
    /// `UIImage(named: "calendar_icon", bundle: ..., traitCollection: ...)`
    static func calendar_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox on", bundle: ..., traitCollection: ...)`
    static func checkboxOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkboxOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox", bundle: ..., traitCollection: ...)`
    static func checkbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "coins_icon", bundle: ..., traitCollection: ...)`
    static func coins_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coins_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "color_icon", bundle: ..., traitCollection: ...)`
    static func color_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.color_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "deadline", bundle: ..., traitCollection: ...)`
    static func deadline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deadline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "done_date", bundle: ..., traitCollection: ...)`
    static func done_date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.done_date, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pen_icon", bundle: ..., traitCollection: ...)`
    static func pen_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pen_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "type_Icon", bundle: ..., traitCollection: ...)`
    static func type_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.type_Icon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `EditGoalViewController`.
    static let editGoalViewController = _R.nib._EditGoalViewController()
    /// Nib `GoalInfoViewController`.
    static let goalInfoViewController = _R.nib._GoalInfoViewController()
    /// Nib `GoalTableViewCell`.
    static let goalTableViewCell = _R.nib._GoalTableViewCell()
    /// Nib `GoalsListViewController`.
    static let goalsListViewController = _R.nib._GoalsListViewController()
    
    /// `UINib(name: "EditGoalViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editGoalViewController) instead")
    static func editGoalViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editGoalViewController)
    }
    
    /// `UINib(name: "GoalInfoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.goalInfoViewController) instead")
    static func goalInfoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goalInfoViewController)
    }
    
    /// `UINib(name: "GoalTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.goalTableViewCell) instead")
    static func goalTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goalTableViewCell)
    }
    
    /// `UINib(name: "GoalsListViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.goalsListViewController) instead")
    static func goalsListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goalsListViewController)
    }
    
    static func editGoalViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.editGoalViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func goalInfoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.goalInfoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func goalTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
      return R.nib.goalTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
    }
    
    static func goalsListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.goalsListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `GoalTableViewCell`.
    static let goalTableViewCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "GoalTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 1 localization keys.
    struct infoPlist {
      /// Base translation: My Everest
      /// 
      /// Locales: Base, ru
      static let cfBundleDisplayName = Rswift.StringResource(key: "CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      
      /// Base translation: My Everest
      /// 
      /// Locales: Base, ru
      static func cfBundleDisplayName(_: Void = ()) -> String {
        return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, value: "My Everest", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localization` struct is generated, and contains static references to 10 localization keys.
    struct localization {
      /// Base translation: Choose deadline
      /// 
      /// Locales: Base
      static let chooseDeadline = Rswift.StringResource(key: "Choose deadline", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Complited date
      /// 
      /// Locales: Base
      static let complitedDate = Rswift.StringResource(key: "Complited date", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Create
      /// 
      /// Locales: Base
      static let create = Rswift.StringResource(key: "Create", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Deadline
      /// 
      /// Locales: Base
      static let deadline = Rswift.StringResource(key: "Deadline", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Description...
      /// 
      /// Locales: Base
      static let description = Rswift.StringResource(key: "Description...", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Error
      /// 
      /// Locales: Base
      static let error = Rswift.StringResource(key: "Error", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Goal title
      /// 
      /// Locales: Base
      static let goalTitle = Rswift.StringResource(key: "Goal title", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Group
      /// 
      /// Locales: Base
      static let group = Rswift.StringResource(key: "Group", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: OK
      /// 
      /// Locales: Base
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Value
      /// 
      /// Locales: Base
      static let value = Rswift.StringResource(key: "Value", tableName: "Localization", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      
      /// Base translation: Choose deadline
      /// 
      /// Locales: Base
      static func chooseDeadline(_: Void = ()) -> String {
        return NSLocalizedString("Choose deadline", tableName: "Localization", bundle: R.hostingBundle, value: "Choose deadline", comment: "")
      }
      
      /// Base translation: Complited date
      /// 
      /// Locales: Base
      static func complitedDate(_: Void = ()) -> String {
        return NSLocalizedString("Complited date", tableName: "Localization", bundle: R.hostingBundle, value: "Complited date", comment: "")
      }
      
      /// Base translation: Create
      /// 
      /// Locales: Base
      static func create(_: Void = ()) -> String {
        return NSLocalizedString("Create", tableName: "Localization", bundle: R.hostingBundle, value: "Create", comment: "")
      }
      
      /// Base translation: Deadline
      /// 
      /// Locales: Base
      static func deadline(_: Void = ()) -> String {
        return NSLocalizedString("Deadline", tableName: "Localization", bundle: R.hostingBundle, value: "Deadline", comment: "")
      }
      
      /// Base translation: Description...
      /// 
      /// Locales: Base
      static func description(_: Void = ()) -> String {
        return NSLocalizedString("Description...", tableName: "Localization", bundle: R.hostingBundle, value: "Description...", comment: "")
      }
      
      /// Base translation: Error
      /// 
      /// Locales: Base
      static func error(_: Void = ()) -> String {
        return NSLocalizedString("Error", tableName: "Localization", bundle: R.hostingBundle, value: "Error", comment: "")
      }
      
      /// Base translation: Goal title
      /// 
      /// Locales: Base
      static func goalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Goal title", tableName: "Localization", bundle: R.hostingBundle, value: "Goal title", comment: "")
      }
      
      /// Base translation: Group
      /// 
      /// Locales: Base
      static func group(_: Void = ()) -> String {
        return NSLocalizedString("Group", tableName: "Localization", bundle: R.hostingBundle, value: "Group", comment: "")
      }
      
      /// Base translation: OK
      /// 
      /// Locales: Base
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("ok", tableName: "Localization", bundle: R.hostingBundle, value: "OK", comment: "")
      }
      
      /// Base translation: Value
      /// 
      /// Locales: Base
      static func value(_: Void = ()) -> String {
        return NSLocalizedString("Value", tableName: "Localization", bundle: R.hostingBundle, value: "Value", comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _EditGoalViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditGoalViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _GoalInfoViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GoalInfoViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _GoalTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UITableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "GoalTableViewCell"
      let name = "GoalTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _GoalsListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GoalsListViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
